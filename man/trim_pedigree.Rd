% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Trimming_Functions.R
\name{trim_pedigree}
\alias{trim_pedigree}
\title{Choose a proband and trim pedigree.}
\usage{
trim_pedigree(ped_file, ascertain_span, num_affected, recall_probs)
}
\arguments{
\item{ped_file}{Data.frame. The ped file generated by \code{sim_ped}.}

\item{ascertain_span}{Numeric list of length 2.  The period, in years, during which the pedigree would be ascertained for study.}

\item{num_affected}{Numeric.  The minimum number of affected individuals in the pedigree.}

\item{recall_probs}{Numeric.  The proband's recall probabilities for relatives.  If missing four times kinship coefficient between the proband and the relative will be used.}
}
\value{
The trimmed ped file
}
\description{
\code{trim_pedigree} chooses a proband from the pedigree and trims relatives
based on the proband's recall probability of that relative.
}
\details{
By default \code{recall_probs} is 4 times the kinship coefficent between the
proband and the probands relative, which results in a recall probability of
\eqn{2^{-(n-1)}} for a relative of degree \eqn{n}. Alternatively, the user may
specify a list of recall probabilites of length \eqn{l > 0}, in which case
the first \emph{l-1} items in \code{recall_probs} are the respective proband
recall probabilites for relatives of degree \emph{1, 2, ..., l-1}, and the
\emph{l}th item in \code{recall_probs} is the proband's recall probability for
all relatives of degree \strong{\emph{l} or greater}.  For example if
\code{recall_probs = c(1)} all relatives will be recalled by the proband with
probability 1.

Within the \code{trim_pedigree} function, the argument \code{num_affected} serves to determine which affected members may be selected as the proband, not to ensure the number of affected members in the trimmed pedigree, as in \code{sim_RVpedigree}.
For example, if there are only two affected members and \code{num_affected = 2}, then \code{trim_pedigree} will choose as the proband the second individual to experience onset, so that at the time of ascertainment the pedigree would have had two affected family members.  If \code{recall_probs != c(1)}, it is possible that proband will not recall the other affected.  Hence, the trimmed pedigree may have only 1 affected family member.
}
\examples{
#Read in example pedigree to trim
data(exp_peds)

#plot example_ped using kinship2
library(kinship2)
ex_pedigree <- pedigree(id = exp_peds$ID,
                        dadid = exp_peds$dad_id,
                        momid = exp_peds$mom_id,
                        sex = (exp_peds$gender + 1),
                        affected = cbind(Affected = exp_peds$affected,
                                         RV_status = exp_peds$DA1 +
                                                     exp_peds$DA2),
                        famid = exp_peds$FamID)['1']
plot(ex_pedigree)
pedigree.legend(ex_pedigree, location = "topleft",  radius = 0.25)
mtext("Original Pedigree", side = 3, line = 2)


## Trim pedigree examples
#define lists of various trimming parameters to
#illustrate the effects of various settings
Recall_Probabilities <- list(r1 = c(1, 0),
                             r2 = c(1),
                             r3 = c(1, 0.5, 0.25, 0.125),
                             r4 = c(1, 0.5, 0.25, 0.125),
                             r5 = c(1, 0.5, 0.25, 0.125))

Number_Affected <- c(2, 2, 2, 2, 3)
Ascertainment_Span <- list(span1 = c(2005, 2015),
                           span2 = c(2005, 2015),
                           span3 = c(2005, 2015),
                           span4 = c(2000, 2015),
                           span5 = c(2000, 2015))


for (k in 1:length(Number_Affected)) {
   set.seed(2)
   #trim pedigree
   TrimPed <- trim_pedigree(ped_file = exp_peds[which(exp_peds$FamID == 1), ],
                            ascertain_span = Ascertainment_Span[[k]],
                            num_affected = Number_Affected[[k]],
                            recall_probs = Recall_Probabilities[[k]])

   #plot trimmed pedigree
   Tped <- pedigree(id = TrimPed$ID,
                    dadid = TrimPed$dad_id,
                    momid = TrimPed$mom_id,
                    sex = (TrimPed$gender + 1),
                    affected = cbind(Affected = TrimPed$affected,
                                     Proband = TrimPed$is_proband,
                                     RV_status = TrimPed$DA1 + TrimPed$DA2),
                    famid = TrimPed$FamID)['1']

   plot(Tped)
   pedigree.legend(Tped, location = "topleft",  radius = 0.25)
   mtext(paste0("recall_probs = (", sep = "",
                paste(Recall_Probabilities[[k]], collapse = ", "),
                ")\\n ascertain_span = (",
                paste(Ascertainment_Span[[k]], collapse = ", "),
                ")\\n num_affected = ", Number_Affected[[k]]),
                side = 3 )
}


}

